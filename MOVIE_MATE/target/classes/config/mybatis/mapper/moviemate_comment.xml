<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mmcomment">
	<select id="selectList" resultType="vo.CommentList_ViewVO"
		parameterType="vo.MovieMate_MovieVO">
		SELECT mmu.user_idx, mmu.username, mmu.profile_img,
		mc.del_info,
		mc.com_content content,
		mc.comment_idx, mc.up, mc.m_ref,
		(select
		count(*) from (select c_ref
		from (select * from moviemate_user
		mmu,
		moviemate_comment mc,
		movie_user mu
		where mmu.username =
		mc.com_username
		AND mmu.user_idx = mu.user_idx
		AND mc.m_ref =
		mu.movie_idx AND(1=2 OR
		star_score > 0 OR want_view =
		'yes')))
		where
		c_ref = mc.c_ref) count,
		mc.regdate, mu.star_score, mu.want_view
		from
		moviemate_user mmu,
		moviemate_comment mc, movie_user mu
		where
		mmu.username =
		mc.com_username AND mc.comment_idx = mc.c_ref AND
		mmu.user_idx =
		mu.user_idx
		AND mc.m_ref = mu.movie_idx AND(1=2 OR
		star_score > 0 Or
		want_view =
		'yes') AND mc.m_ref = #{movie_idx}
	</select>

	<select id="myComment" resultType="vo.MovieMate_CommentVO"
		parameterType="vo.MovieMate_CommentVO">
		SELECT * FROM moviemate_comment WHERE com_username =
		#{com_username} AND m_ref = #{m_ref} AND comment_idx = c_ref
	</select>

	<insert id="insert" parameterType="vo.MovieMate_CommentVO">
		INSERT INTO moviemate_comment
		VALUES(seq_comment_idx.nextVal,#{com_username},#{com_content},
		0,
		#{m_ref}, 0, 0, 0, seq_comment_idx.currVal, sysdate)
	</insert>

	<update id="update" parameterType="vo.MovieMate_CommentVO">
		UPDATE moviemate_comment SET
		com_content = #{com_content}, del_info = 0
		WHERE comment_idx = #{comment_idx}
	</update>

	<select id="commentCount" resultType="int">
		select COUNT (*) from
		moviemate_comment
	</select>

	<select id="commentOrigin" resultType="vo.CommentList_ViewVO"
		parameterType="vo.Movie_CommentVO">
		SELECT mmm.profile_img movie_profile_img, mc.del_info,
		mmm.release_date, mmm.title, mmm.movie_idx, mmu.user_idx,
		mmu.username, mmu.profile_img user_profile_img, mc.com_content
		content, mc.comment_idx, mc.up, mc.m_ref,
		(select count(*) from (select
		c_ref from (select * from moviemate_user mmu,
		moviemate_comment mc,
		movie_user mu
		where mmu.username = mc.com_username AND mmu.user_idx =
		mu.user_idx AND
		mc.m_ref = mu.movie_idx AND(1=2 OR star_score > 0 OR
		want_view =
		'yes')))
		where c_ref = mc.c_ref) count,
		mc.regdate,
		mu.star_score, mu.want_view
		from moviemate_user mmu,
		moviemate_comment
		mc, movie_user mu, moviemate_movie mmm
		where mmu.username =
		mc.com_username AND mc.comment_idx = mc.c_ref AND
		mc.m_ref =
		mmm.movie_idx AND
		mmu.user_idx = mu.user_idx AND mc.m_ref =
		mu.movie_idx AND(1=2 OR mu.star_score >
		0 OR mu.want_view ='yes') AND
		mc.m_ref = #{movie_idx} AND mc.c_ref = #{comment_idx}
		AND comment_idx =
		#{comment_idx}
	</select>

	<select id="commentList" resultType="vo.CommentList_ViewVO"
		parameterType="vo.Movie_CommentVO">
		SELECT mmm.profile_img movie_profile_img, mc.del_info,
		mmm.release_date, mmm.title, mmm.movie_idx, mmu.user_idx,
		mmu.username, mmu.profile_img user_profile_img, mc.com_content
		content, mc.comment_idx, mc.up, mc.m_ref,
		(select count(*) from (select
		c_ref from (select * from moviemate_user mmu,
		moviemate_comment mc,
		movie_user mu
		where mmu.username = mc.com_username AND mmu.user_idx =
		mu.user_idx AND
		mc.m_ref = mu.movie_idx AND(1=2 OR star_score > 0 OR
		want_view =
		'yes')))
		where c_ref = mc.c_ref) count,
		mc.regdate,
		mu.star_score, mu.want_view
		from moviemate_user mmu,
		moviemate_comment
		mc, movie_user mu, moviemate_movie mmm
		where mmu.username =
		mc.com_username AND mc.comment_idx != mc.c_ref AND
		mc.m_ref =
		mmm.movie_idx AND
		mmu.user_idx = mu.user_idx AND mc.m_ref =
		mu.movie_idx AND(1=2 OR mu.star_score >
		0 OR mu.want_view ='yes') AND
		mc.m_ref = #{movie_idx} AND mc.c_ref = #{comment_idx}
		ORDER BY regdate
		DESC
	</select>

	<insert id="cocommentInsert"
		parameterType="vo.MovieMate_CommentVO">
		INSERT INTO moviemate_comment
		VALUES(seq_comment_idx.nextVal, #{com_username}, #{com_content}, 0,
		#{m_ref}, 0, 0, 0, #{c_ref}, sysdate)
	</insert>

	<update id="increaseUp" parameterType="vo.User_CommentVO">
		UPDATE moviemate_comment
		SET up = up + 1 WHERE comment_idx = #{comment_idx}
	</update>

	<update id="decreaseUp" parameterType="vo.User_CommentVO">
		UPDATE moviemate_comment
		SET up = up - 1 WHERE comment_idx = #{comment_idx}
	</update>

	<select id="reload" parameterType="vo.User_CommentVO"
		resultType="int">
		SELECT up FROM moviemate_comment WHERE comment_idx =
		#{comment_idx}
	</select>
	
	<update id="delete_comment"
		parameterType="vo.MovieMate_CommentVO">
		UPDATE moviemate_comment SET
		del_info = 1
		WHERE comment_idx = #{comment_idx}
	</update>

</mapper>








